class ScionTestFrameworkGenerator < TestGenerator
  def self.generate
    project_root = Pathname.new File.expand_path "..", __dir__
    #spec_path = project_root.join "../predicator_spec"

    #spec_path.glob "evaluator/*.yml" do |file|
    #  generator = new project_root, file
    #  generator.generate
    #end
  end

  def initialize project_root, input_filename
    @project_root = project_root
    @spec_path = project_root.join "../predicator_spec"
    @input_filename = input_filename
    @test_case = YAML.safe_load File.read input_filename
  end

  def instructions
    test_case["instructions"]
  end

  private

  def language_settings
    {
      elixir: {
        filename_template: "%s_test.exs",
        template: <<~TEMPLATE
          # AUTOGENERATED FILE - DO NOT EDIT
          defmodule Predicator.<%= class_name %>Test do
            use ExUnit.Case, async: false

            setup_all do
              %{instructions: <%= instructions %>}
            end
          <% tests.each do |test| %>
            test "<%= test["name"] %>", context do
              predicate_context = <% if test["context"].nil? %>nil<% else %><%= elixir_hash test["context"] %><% end %>
              expected_result = <% if test["result"].nil? %>nil<% else %><%= test["result"] %><% end %>

              result = Predicator.Evaluator.execute context[:instructions], predicate_context
              assert expected_result == result
              #assert_empty e.stack
            end
          <% end %>
          end
        TEMPLATE
      },
      ruby: {
        filename_template: "test_%s.rb",
        template: <<~TEMPLATE
          # AUTOGENERATED FILE - DO NOT EDIT
          require "helper"

          class <%= class_name %>Test < ::Minitest::Test
            attr_reader :instructions

            def setup
              @instructions = <%= instructions %>
            end
          <% tests.each do |test| %>
            def test_<%= test["name"] %>
              context = <% if test["context"].nil? %>nil<% else %><%= test["context"] %><% end %>
              expected_result = <% if test["result"].nil? %>nil<% else %><%= test["result"] %><% end %>

              e = ::Predicator::Evaluator.new instructions, context
              assert_equal expected_result, e.result
              assert_empty e.stack
            end
          <% end %>
          end
        TEMPLATE
      }
    }
  end
end
